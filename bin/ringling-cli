"""
Copyright 2023 MSOE DISE Project

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import json
import argparse
import sys
import os
from ringling.test_script import print_test
from ringling.projects import create_project
from ringling.projects import list_projects
from ringling.projects import get_project
from ringling.param_sets import create_param_set
from ringling.param_sets import list_param_sets
from ringling.param_sets import get_param_set
from ringling.param_sets import modify_param_set


def parse_boolean(arg):
    if arg in ("True", "true", 1):
        return True
    elif arg in ("False", "false", 0):
        return False
    else:
        raise argparse.ArgumentTypeError('Boolean value expected.')


def parseargs():
    parser = argparse.ArgumentParser()

    object_type_choices = ["project", "param-set", "deploy-status", "model-test-results"]
    action_choices = ["get", "create", "list", "modify"]

    parser.add_argument("base_url",
                        type = str)

    parser.add_argument("object_type",
                        type = str,
                        choices = object_type_choices)

    parser.add_argument("action",
                        type = str,
                        choices = action_choices)

    parser.add_argument("-N", "--name",
                    type = str,
                    required = False)

    parser.add_argument("-P", "--params",
                    type = str,
                    required = False,
                    nargs='*')

    # Type of bool does not accept true or false input
    parser.add_argument("-A", "--active",
                    type=parse_boolean,
                    required = False)

    parser.add_argument("--id",
                type = int,
                required = False)

    return parser.parse_args()


if __name__ == "__main__":
    args = parseargs()

    base_url = args.base_url
    if base_url == "localhost":
        base_url = "http://localhost:8888"

    if args.object_type == "project":
        if args.action == "get":
            if args.id is None:
                print("This action requires an integer id to be specified using --id")
            else:
                get_project(base_url, args.id)
        elif args.action == "create":
            if args.name is None:
                print("This action requires a name to be specified using --name or -N")
            else:
                create_project(base_url, args.name)
        elif args.action == "list":
            list_projects(base_url)

    elif args.object_type == "param-set":
        if args.action == "get":
            if args.id is None:
                print("This action requires an integer id to be specified using --id")
            else:
                get_param_set(base_url, args.id)
        elif args.action == "create":
            params = {}

            if args.id is None:
                print("This action requires a linked project id to be specified using --id")
            if args.params is None:
                print("This action requires valid json formatted params specified using -P or --params")
            else:
                try:
                    if args.params[0][-5:] == ".json":
                        if not os.path.isfile(args.params[0]):
                            print("Specified file does not exist", file=sys.stderr)
                            sys.exit(1)
                        with open(args.params[0], 'r', encoding='utf-8') as file:
                            params = json.load(file)
                    else:
                        if "\"" in args.params[0]:
                            params = json.loads(args.params[0])
                        else:
                            params = json.loads(args.params[0].replace("'", '"'))
                except json.decoder.JSONDecodeError:
                    print("Specified params must be a link to a file", file=sys.stderr)
                    print("Or json formatted but with single or escaped double quotes", file=sys.stderr)
                    sys.exit(1)
            if args.active is None:
                print("This action requires an active boolean to be specified using -A or --active")
            if None not in (args.params, args.id, args.active):
                create_param_set(base_url, args.id, params, args.active)
        elif args.action == "modify":
            if args.id is None:
                print("This action requires an integer id to be specified using --id")
            if args.active is None:
                print("This action requires an active boolean to be specified using -A or --active")
            if None not in (args.id, args.active):
                modify_param_set(base_url, args.id, args.active)
        elif args.action == "list":
            list_param_sets(base_url)